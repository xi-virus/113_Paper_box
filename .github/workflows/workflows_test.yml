# 此 GitHub Workflow 的功能是將指定文件複製到名為 release 的文件夾中，然後使用這些文件來構建和運行 Docker 容器，並進行測試。使用說明：
# 1. 將此文件保存為 .github/workflows/moduleTest.yml。
# 2. 當推送到 main 分支或 pull request 事件發生時，此工作流程將自動執行。
name: moduleTest

on:
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: 取出代碼
        uses: actions/checkout@v2

      - name: 打包文件(1/2)-蒐整檔案
        run: |
          mkdir release
          cp LICENSE release/
          cp README.md release/
          cp src/cfg_docker/dockerfile release/Dockerfile
          cp src/src_paperPassBox/boxInitialize.sh release/

      - name: 打包檔案(2/2)-壓縮上傳
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: release

      - name: 準備Docker受測容器
        run: |
          cp -r ./release ./deployment
          cd deployment
          docker build -t myapp:latest .
          docker run -d -p 2222:22 --name myapp_container myapp:latest
          docker ps -a  # 列出所有容器以進行調試

      - name: 等待容器啟動
        run: sleep 30  # 等待一段時間以確保SSH服務啟動

      - name: 檢查容器日誌
        run: docker logs myapp_container  # 顯示容器日誌以幫助調試

      - name: 檢查SSH配置
        run: |
          docker exec myapp_container grep 'PermitRootLogin' /etc/ssh/sshd_config
          docker exec myapp_container grep 'root' /etc/shadow
          docker exec myapp_container grep 'user' /etc/shadow

      - name: 執行Pytest測試個案(1/3)-安裝Python(須配合pipenv版本)
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.10'

      - name: 執行Pytest測試(2/3)-安裝pipenv並復原虛擬環境
        run: |
          cp -R src/src_paperPassBox_test test
          cd test
          pip install pipenv
          pipenv install --deploy --ignore-pipfile

      - name: 執行Pytest測試(3/3)-執行Pytest測試
        run: |
          cd test
          pipenv run pytest
